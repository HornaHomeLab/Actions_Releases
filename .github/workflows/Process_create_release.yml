name: Publish release
run-name: Publish release

on:
  workflow_call:
    inputs:
      pre_release:
        type: boolean
        default: false
        required: false
      archive_name:
        type: string
        required: true
      files:
        type: string
        required: false
        default: "null"

permissions:
  contents: write

env:
  success_ico: ":heavy_check_mark:"
  failure_ico: ":x:"
  cancel_ico: ":no_entry_sign:"

jobs:
  Release:
    runs-on: ${{ vars.DEFAULT_RUNNER }}
    outputs:
      version: ${{ steps.file.outputs.tag_name }}
      release_id: ${{ steps.check.outputs.release_id != 'null' && steps.check.outputs.release_id || steps.create.outputs.release_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Tag
        id: file
        run: |
          tag=$(grep '##### version:' './README.md' | awk -F: '{print $2}' | tr -d '[:blank:]')

          if [ -z "$tag" ]; then
            echo "Can not find verion in ./README.md"
            echo "# ${{ env.failure_ico }} Cannot find version in ./README.md ${{ env.failure_ico }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "tag_name=$tag" >> $GITHUB_OUTPUT
          echo "### :rocket: Creating release $tag :rocket:" >> $GITHUB_STEP_SUMMARY

      - name: Check
        id: check
        env:
          version: ${{ steps.file.outputs.tag_name }}
        run: |
          echo "https://api.github.com/repos/${{ github.repository }}/releases/tags/$version"
          
          release_details=$(
            curl -L -s \
              -X GET \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/releases/tags/$version
          )
          release_id=$(echo "$release_details" | jq .id)
          pre_release=$(echo "$release_details" | jq .prerelease)

          if [ "$pre_release" == "false" ]; then
            echo "Can not modify Full Release"
            echo "# ${{ env.failure_ico }} Can not modify Full Release ($version) ${{ env.failure_ico }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "release_id=$release_id" >> $GITHUB_OUTPUT

      - name: Create
        id: create
        if: steps.check.outputs.release_id == 'null'
        env:
          version: ${{ steps.file.outputs.tag_name }}
        run: |
          release=$(
            curl -L -s \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              --url https://api.github.com/repos/${{ github.repository }}/releases/ \
              -d '{
                "tag_name":"$version",
                "name":"$version Release",
                "body":"",
                "draft":false,
                "prerelease":${{ inputs.pre_release }},
                "generate_release_notes":false
              }'
            )

          release_id=$(echo "$release" | jq .id)

          if [ "$release_id" == 'null' ]; than
            echo "Failed to create Release $version."
            echo "$# {{ env.failure_ico }} Failed to create Release $version. ${{ env.failure_ico }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Update
        if: steps.check.outputs.release_id != 'null'
        env:
          version: ${{ steps.file.outputs.tag_name }}
          release_id: ${{ steps.check.outputs.release_id }}
        run: |
          curl -L -s --fail-with-body \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            --url https://api.github.com/repos/${{ github.repository }}/releases/$release_id \
            -d '{
              "tag_name":"$version",
              "name":"$version Release",
              "body":"",
              "draft":false,
              "prerelease":${{ inputs.pre_release }},
              "generate_release_notes":false
            }'

      - name: Link
        env:
          version: ${{ steps.file.outputs.tag_name }}
        run: |
          curl -L -s --fail-with-body \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            --url https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$version \
            -d '{ 
              "sha":"${{ github.sha }}",
              "force":true
            }'
      - name: Summary
        env:
          version: ${{ steps.file.outputs.tag_name }}
        run: |
          echo "${{ env.success_ico }} Release $version created successfully ${{ env.success_ico }}" >> $GITHUB_STEP_SUMMARY

  Asset:
    if: inputs.files != 'null'
    needs: Release
    uses: HornaHomeLab/Actions_Releases/.github/workflows/Create_asset.yml@development
    with:
      archive_name: ${{ inputs.archive_name }}
      release_id: ${{ needs.Release.outputs.release_id }}
      version_tag: ${{ needs.Release.outputs.version }}
      files_to_archive: ${{ inputs.files }}
    secrets:
      inherit
